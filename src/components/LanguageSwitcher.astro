---
import { languages, getTransLink } from '../lib/i18n'

const { language = 'en' } = Astro.props
const currentPath = Astro.url.pathname
---

<div class="relative inline-block">
  <button 
    id="dropdowntoggle" 
    type="button" 
    class="inline-flex items-center p-1.5 gap-0.5 rounded-sm select-none cursor-pointer text-white" 
    aria-expanded="false" 
    aria-haspopup="true" 
    aria-label="Select language"
  >
    <span class="uppercase text-sm">{language}</span>
    <svg class="-scale-100" width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg">
      <path d="M4 10L8 6L12 10" stroke="currentColor" stroke-width="1.33333" stroke-linecap="round" stroke-linejoin="round"/>
    </svg>
  </button>
  <div id="dropdown" class="hidden absolute right-0 w-[120px] mt-2 rounded-lg bg-white shadow-lg" aria-labelledby="dropdowntoggle">
    <ul class="flex flex-col p-2 gap-y-1" role="none">
      {Object.entries(languages).map(([code, label]) => (
        <li>
          <a
            href={code === 'en' ? currentPath : `/${code}${currentPath}`}
            class={`flex items-center gap-2 rounded-sm p-2 text-sm hover:bg-gray-100 ${code === language ? 'bg-gray-100' : ''}`}
          >
            <span class="uppercase text-xs font-medium">{code}</span>
            <span class="text-gray-600">{label}</span>
          </a>
        </li>
      ))}
    </ul>
  </div>
</div>

<script is:inline>
  document.addEventListener('DOMContentLoaded', () => {
    const toggleBtn = document.getElementById('dropdowntoggle')
    const dropdown = document.getElementById('dropdown')

    toggleBtn.addEventListener('click', () => {
      dropdown.classList.toggle('hidden')
      const expanded = toggleBtn.getAttribute('aria-expanded') === 'true'
      toggleBtn.setAttribute('aria-expanded', !expanded)
    })

    document.addEventListener('click', (e) => {
      if (!toggleBtn.contains(e.target) && !dropdown.contains(e.target)) {
        dropdown.classList.add('hidden')
        toggleBtn.setAttribute('aria-expanded', false)
      }
    })
  })
</script>
